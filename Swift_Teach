SwiftUI App Development Guide
Overview of the App
This guide explains how to assemble the SwiftUI files into a fully functional app. The app allows users to:

View a list of awards.
See details for individual awards.
Add new awards.
View a summary of award statistics.
File Breakdown
AwardRecord.swift
This file defines the AwardRecord struct representing an award. Each award has:

id: A unique identifier (UUID).
name: The recipient's name.
competition: The competition name.
award: The award type (e.g., Gold, Silver, Bronze, Merit).
struct AwardRecord: Identifiable {
    var id: String = UUID().uuidString
    var name: String
    var competition: String
    var award: String
}
            
AwardManager.swift
This file manages the list of awards and provides functionality to add, remove, and retrieve awards:

Copy Code
struct AwardManager {
    var records: [AwardRecord]

    init() {
        self.records = []
        let award1 = AwardRecord(name: "Kelvin", competition: "WWDC Student Challenge", award: "Winner")
        let award2 = AwardRecord(name: "Jacky", competition: "HKICT Awards", award: "Bronze")
        self.records.append(award1)
        self.records.append(award2)
    }

    func count() -> Int {
        return records.count
    }

    mutating func add(_ record: AwardRecord) {
        records.append(record)
    }

    func record(at index: Int) -> AwardRecord {
        return records[index]
    }

    mutating func remove(at index: Int) {
        records.remove(at: index)
    }
}
            
ContentView.swift
The main view of the app. It:

Displays a list of awards using a List and NavigationLink.
Provides buttons for "Summary" and "Add" features (modals).
Copy Code
struct ContentView: View {
    @State var manager = AwardManager()
    @State private var showAdd = false
    @State private var showSummary = false

    var body: some View {
        NavigationView {
            VStack {
                List {
                    ForEach(0..< manager.count(), id: \.self) { i in
                        let award = manager.record(at: i)
                        NavigationLink(destination: DetailView(award: award)) {
                            HStack {
                                Text(award.name)
                                    .font(.headline)
                                Spacer()
                                Text(award.award)
                                    .font(.headline)
                            }
                        }
                    }
                }
                .listStyle(PlainListStyle())
            }
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button(action: { showSummary = true }) {
                        Text("Summary").font(.headline)
                    }
                }
                ToolbarItem(placement: .principal) {
                    Text("Honour Records").font(.headline)
                }
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: { showAdd = true }) {
                        Image(systemName: "plus")
                    }
                }
            }
            .sheet(isPresented: $showAdd) {
                AddView(showAdd: $showAdd, manager: $manager)
            }
            .sheet(isPresented: $showSummary) {
                SummaryView(manager: manager)
            }
        }
    }
}
            
DetailView.swift
Displays the details of a selected award:

Copy Code
struct DetailView: View {
    let award: AwardRecord

    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("Name: \(award.name)")
                .font(.title)
                .fontWeight(.bold)

            Text("Competition: \(award.competition)")
                .font(.headline)

            Text("Award: \(award.award)")
                .font(.headline)
                .foregroundColor(.blue)

            Spacer()
        }
        .padding()
        .navigationTitle("Detail")
        .navigationBarTitleDisplayMode(.inline)
    }
}
            
AddView.swift
Provides a UI to add new awards to the list:

Copy Code
struct AddView: View {
    @Binding var showAdd: Bool
    @Binding var manager: AwardManager

    @State private var name: String = ""
    @State private var competition: String = ""
    @State private var award: String = ""

    var body: some View {
        VStack {
            HStack {
                Button(action: {
                    let newAward = AwardRecord(name: name, competition: competition, award: award.isEmpty ? "Merit" : award)
                    manager.add(newAward)
                    showAdd = false
                }) {
                    Text("Add")
                }
                Button(action: {
                    showAdd = false
                }) {
                    Text("Cancel")
                }
                .padding(10)
            }
            TextField("Name", text: $name).textFieldStyle(.roundedBorder).padding(.horizontal)
            TextField("Competition", text: $competition).textFieldStyle(.roundedBorder).padding(.horizontal)
            TextField("Award", text: $award).textFieldStyle(.roundedBorder).padding(.horizontal)
            Spacer()
        }
        .padding()
    }
}
            
SummaryView.swift
Displays a summary of awards grouped by type:

Copy Code
struct SummaryView: View {
    var manager: AwardManager

    private var goldCount: Int { manager.records.filter { $0.award == "Gold" }.count }
    private var silverCount: Int { manager.records.filter { $0.award == "Silver" }.count }
    private var bronzeCount: Int { manager.records.filter { $0.award == "Bronze" }.count }
    private var meritCount: Int { manager.records.filter { $0.award == "Merit" }.count }

    var body: some View {
        VStack(spacing: 20) {
            Text("Award Summary").font(.largeTitle).fontWeight(.bold).padding(.top)
            VStack(alignment: .leading) {
                Text("Gold: \(goldCount)").foregroundColor(.yellow)
                Text("Silver: \(silverCount)").foregroundColor(.gray)
                Text("Bronze: \(bronzeCount)").foregroundColor(.brown)
                Text("Merit: \(meritCount)").foregroundColor(.blue)
            }
            .padding()
            Spacer()
        }
    }
}
            
app_movApp.swift
The app's entry point. It launches ContentView:

@main
struct app_movApp: App {
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
    }
}
            
Â© 2024 SwiftUI App Guide
